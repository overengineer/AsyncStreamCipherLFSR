        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ; MIT License
        ;
        ; Copyright © 2018 Alper Said Soylu
        ;
        ; Permission is hereby granted, free of charge, to any person obtaining a copy of
        ; this software and associated documentation files (the “Software”), to deal in
        ; the Software without restriction, including without limitation the rights to
        ; use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
        ; of the Software, and to permit persons to whom the Software is furnished to do
        ; so, subject to the following conditions:
        ;
        ; The above copyright notice and this permission notice shall be included in all
        ; copies or substantial portions of the Software.
        ;
        ; THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
        ; FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
        ; COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
        ; IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
        ; CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;
        ; Project:
        ;
        ; SELF-SYNCHRONIZING STREAM CIPHER WITH LINEAR FEEDBACK SHIFT REGISTER
        ;
        ; Description:
        ;
        ;  This program implements additive binary ansynch stream cipher using a hardware
        ;  LFSR. Input data is read from external memory.
        ;
        ; Program : SSSC
        ; Author  : Alper Said Soylu
        ; Date    : 12/27/2018
        ;
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        NAMEREG s0, PUBLIC_KEY
        NAMEREG s1, MESSAGE
        NAMEREG s2, CIPHER
        NAMEREG s5, ram_addr
        CONSTANT PUBLIC_KEY_ADDR, 00
        CONSTANT DATA_START_ADDR, 01
        CONSTANT DATA_END_ADDR, FF
        CONSTANT LFSR_ADDR, 00
        CONSTANT PRIVATE_KEY, 54
 start: 
        INPUT PUBLIC_KEY, PUBLIC_KEY_ADDR
        LOAD ram_addr, DATA_START_ADDR
        OUTPUT PUBLIC_KEY, LFSR_ADDR
        JUMP first
  loop: 
        INPUT MESSAGE, (ram_addr)
        INPUT CIPHER, LFSR_ADDR
        XOR CIPHER, PRIVATE_KEY
        XOR CIPHER, MESSAGE
        OUTPUT CIPHER, LFSR_ADDR
 first: 
        ;COMPARE ram_addr, DATA_END_ADDR
        ;JUMP  Z, finish
        ADD ram_addr, 01
        JUMP loop
finish: 
        OUTPUT PUBLIC_KEY, LFSR_ADDR      ; just to signal end of the process
        JUMP finish                       ; halt
